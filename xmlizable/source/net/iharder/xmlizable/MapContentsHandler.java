package net.iharder.xmlizable;

/**
 * This <tt>org.xml.sax.DocumentHandler</tt> tries to parse an XML
 * source that is a <tt>java.util.Map</tt> such as the XML
 * generated by <tt>MapParser</tt>.
 *
 *
 * <p>
 * I am placing this code in the Public Domain. Do with it as you will.
 * This software comes with no guarantees or warranties but with
 * plenty of well-wishing instead!
 * Please visit <a href="http://iharder.net/xmlizable">http://iharder.net/xmlizable</a>
 * periodically to check for updates or to contribute improvements.
 * </p>
 *
 * @author Robert Harder
 * @author rharder@usa.net
 * @version 1.2
 */
public class MapContentsHandler extends ObjectHandler implements XmlConstants
{
    private java.util.Map map;
    private java.util.Stack stack = new java.util.Stack();
    
    private String currentKey;
    private String currentClass;
    
    
    
    public MapContentsHandler()
    {   this( new java.util.HashMap() );
    }   // end constructor
    
    
    /**
     * Creates a <tt>MapHandler</tt> that will add data from the
     * SAX events into the passed {@link java.util.Map}. With this
     * construct you do not need to call {@link #getMap} at the
     * end of the parsing.
     *
     * @param map The {@link java.util.Map} to build
     * @since 1.1
     */
    public MapContentsHandler(java.util.Map map)
    {   setObject( map );
    }   // end constructor
    
    
    
    
    public java.util.Map getMap()
    {   return (java.util.Map)getObject();
    }   // end getMap
    
    
/* ********  D O C U M E N T   H A N D L E R   M E T H O D S  ******** */    
    
    
    /**
     * This should only see "entry" elements. It will ignore other elements entirely.
     */
    public void startElement( 
    final String namespaceURI, final String localName, 
    final String qName, final org.xml.sax.Attributes atts )
    throws org.xml.sax.SAXException
    {
        if( getAltHandler() != null )
        {   // Another handler is in charge now.
            getAltHandlerElementStack().push( localName );
            getAltHandler().startElement( namespaceURI, localName, qName, atts );
        }   // end if: another handler has taken over for a while
        else
        {
            // This must be an "entry" element, because that's all that's allowed in a map
            if( MAP_ENTRY_C.equals( localName ) || MAP_ENTRY.equals( localName ) )
            {
                // Pass the contents to a MapEntryHandler which will handle
                // the 'key' and 'value' elements
                setAltHandler( new MapEntryHandler() );
                setAltHandlerElementStack( new java.util.Stack() );
                getAltHandlerElementStack().push( localName );
            }   // end if: found an entry element
            
            // Else found some other element type.
            // Ignore it by ignoring all SAX2 events until the
            // close of the element.
            else
            {
                setAltHandler( new org.xml.sax.helpers.DefaultHandler() );
                setAltHandlerElementStack( new java.util.Stack() );
                getAltHandlerElementStack().push( localName );
            }   // end else: some other element
                
        }   // end else: alternate handler not null
    }   // end startElement

    

    public void endElement( 
    final String namespaceURI, final String localName, final String qName) 
    throws org.xml.sax.SAXException
    {
        // Are we the primary handler?
        if( getAltHandler() != null )
        {
            getAltHandlerElementStack().pop();
            if( getAltHandlerElementStack().isEmpty() )
            {   
                // Get the object
                MapEntryHandler meh = (MapEntryHandler)getAltHandler();
                Object key = meh.getKey();
                Object value = meh.getValue();
                try
                {   getMap().put( key, value );
                }   // end try
                catch( NullPointerException e )
                {   System.out.println( "Null not allowed in map" );
                }   // end catch
                
                setAltHandlerElementStack( null );
                setAltHandler( null );
            }   // end if: stack empty
            
            else getAltHandler().endElement( namespaceURI, localName, qName );
        }   // end if: there is an alternate handler
        
    }   // end endElement
    
    
   
    
    
    
    
    
    
    /* ********  I N N E R   C L A S S   M A P   E N T R Y   H A N D L E R  ******** */
    
    
    private static class MapEntryHandler extends ObjectHandler
    {

        private java.util.Stack stack = new java.util.Stack();

        
        private Object key;
        private Object value;

        
        public Object getObject()
        {   return new Object[]{ getKey(), getValue() };
        }   // end getObject
        
        public Object getKey()
        {   return key;
        }   // end getKey
        
        public Object getValue()
        {   return value;
        }   // end getValue


    /* ********  D O C U M E N T   H A N D L E R   M E T H O D S  ******** */    


        public void startElement( 
        final String namespaceURI, final String localName, 
        final String qName, final org.xml.sax.Attributes atts )
        throws org.xml.sax.SAXException
        {
            if( getAltHandler() != null )
            {   // Another handler is in charge now.
                getAltHandlerElementStack().push( localName );
                getAltHandler().startElement( namespaceURI, localName, qName, atts );
            }   // end if: another handler has taken over for a while
            
            // Is it one of ours?
            else if( NAMESPACE.equals( namespaceURI ) )
            {
                // Is it the key?
                if( MAP_KEY_C.equals( localName ) || MAP_KEY.equals( localName ) )
                {
                    // Pass the contents to an ObjectHandler which will handle
                    // the 'key' element by collecting the object within
                    // <key>...</key>. 
                    setAltHandler( new ObjectHandler() );
                    resetAltHandlerElementStack().push( localName );
                }   // end if: a "key" element

                // Is it the value?
                else if( MAP_VALUE_C.equals( localName ) || MAP_VALUE.equals( localName ) )
                {
                    // Pass the contents to an ObjectHandler which will handle
                    // the 'value' element by collecting the object within
                    // <value>...</value>. 
                    setAltHandler( new ObjectHandler() );
                    resetAltHandlerElementStack().push( localName );
                }   // end if: a "value" element
                
                // Else it was our namespace with an unrecognized element name
                else
                {   throw new org.xml.sax.SAXException( 
                        "The element " + localName + " is not a valid element name for the " + 
                        NAMESPACE + " namespace" );
                }   // end else: error
            }   // end else: our namespace

            // Else found some other namespace
            // Ignore it by ignoring all SAX2 events until the
            // close of the element.
            else
            {
                setAltHandler( new org.xml.sax.helpers.DefaultHandler() );
                resetAltHandlerElementStack().push( localName );
                getAltHandler().startElement( namespaceURI, localName, qName, atts );
            }   // end else: some other element

        }   // end startElement
    
        
        
        public void endElement( final String namespaceURI, final String localName, final String qName ) 
        throws org.xml.sax.SAXException
        {
            // Are we the primary handler?
            if( getAltHandler() != null )
            {
                String element = (String)getAltHandlerElementStack().pop();
               
                // Are we ready to retrieve the results?
                if( getAltHandlerElementStack().isEmpty() )
                {   
                    // Get the object.
                    if( getAltHandler() instanceof ObjectHandler )
                    {
                        Object obj = ((ObjectHandler)getAltHandler()).getObject();

                        // Was it the key that we finished?
                        if( MAP_KEY_C.equals( localName ) || MAP_KEY.equals( element ) )
                        {   
                            // Only set this key if we don't already have a key
                            if( key == null )
                                key = obj;
                        }   // end if: end of key
                        
                        // Was it the value that we finished?
                        else if( MAP_VALUE_C.equals( localName ) || MAP_VALUE.equals( element ) )
                        {   
                            // Only set this value if we don't already have a value
                            if( value == null )
                                value = obj;
                        }   // end if: end of value
                    }   // end if: handler is an ObjectHandler
                    
                    clearAltHandlerElementStack();
                    clearAltHandler();

                }   // end if: stack empty
           
                // Else we should still pass on the event
                else getAltHandler().endElement( namespaceURI, localName, qName );
            }   // end if: altHandler not null

        }   // end endElement

    }   // end inner class MapEntryHandler
    
}   // end class MapHandler
