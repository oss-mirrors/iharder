//package base64test;

//import org.junit.Test;
//import static org.junit.Assert.*;

/**
 * @author mdobacz
 */
public class ResolveNullChar
{

    byte[] data = new byte[]
    {
              48, -126,    4,   54,   48, -126,    3,   30,  -96,    3,
               2,    1,    2,    2,    9,    0,   -6,   91,   59,  -32,
              20,   24,   30,   75,   48,   13,    6,    9,   42, -122,
              72, -122,   -9,   13,    1,    1,    5,    5,    0,   48,
             111,   49,   11,   48,    9,    6,    3,   85,    4,    6,
              19,    2,   80,   76,   49,   19,   48,   17,    6,    3,
              85,    4,    8,   19,   10,   83,  111,  109,  101,   45,
              83,  116,   97,  116,  101,   49,   17,   48,   15,    6,
               3,   85,    4,    7,   19,    8,   87,   97,  114,  115,
             122,   97,  119,   97,   49,   25,   48,   23,    6,    3,
              85,    4,   10,   19,   16,   83,   99,  111,  116,  116,
              32,   84,  105,  103,  101,  114,   32,   83,   46,   65,
              46,   49,   11,   48,    9,    6,    3,   85,    4,   11,
              19,    2,   73,   84,   49,   16,   48,   14,    6,    3,
              85,    4,    3,   19,    7,   85,  108,   32,   82,  111,
             111,  116,   48,   30,   23,   13,   48,   57,   49,   50,
              48,   52,   49,   49,   51,   55,   50,   50,   90,   23,
              13,   49,   48,   48,   49,   48,   51,   49,   49,   51,
              55,   50,   50,   90,   48,  111,   49,   11,   48,    9,
               6,    3,   85,    4,    6,   19,    2,   80,   76,   49,
              19,   48,   17,    6,    3,   85,    4,    8,   19,   10,
              83,  111,  109,  101,   45,   83,  116,   97,  116,  101,
              49,   17,   48,   15,    6,    3,   85,    4,    7,   19,
               8,   87,   97,  114,  115,  122,   97,  119,   97,   49,
              25,   48,   23,    6,    3,   85,    4,   10,   19,   16,
              83,   99,  111,  116,  116,   32,   84,  105,  103,  101,
             114,   32,   83,   46,   65,   46,   49,   11,   48,    9,
               6,    3,   85,    4,   11,   19,    2,   73,   84,   49,
              16,   48,   14,    6,    3,   85,    4,    3,   19,    7,
              85,  108,   32,   82,  111,  111,  116,   48, -126,    1,
              34,   48,   13,    6,    9,   42, -122,   72, -122,   -9,
              13,    1,    1,    1,    5,    0,    3, -126,    1,   15,
               0,   48, -126,    1,   10,    2, -126,    1,    1,    0,
             -39,   94,  -73,   36,  -36,  123,   -1,  -20,  -52,   92,
              -9, -106,  120, -104,  -54,   50,  114,  -32,  -69,  -57,
              -2,   66,  -15,  -78,  115,  -39,  -85,  -66,  -88,  -35,
             -45,   72, -106,  -13,   76,  -53,   48,   59, -112,  -30,
             -69,   84,   21,   77,   81,  -81,  -52,   69,  110,  -20,
             125,  -89,   35,   75,  -91,   46,   -3,  -23,  -56,  -58,
              98,  -37,  106,   73,  -75,   85,  -17,  -33,  -89,   50,
              26,    7,   78,  -68,  -87,   45, -100,  107,   69,   32,
             114,   29,  -50,  114,   14,  -80,  -82,  114,   -3,  125,
             -35,  -17, -126,  -74,   75,  127,  -17,  -65,   54,   93,
              21,  -75,  -26,   39,   64, -123,  -84,   62, -106,   78,
            -128,   16,   -3,  -22,   51,    6,  -42,   16,   -2,   15,
              62,  -56,   34,  105,   93, -104,    8,  106,    6,  -36,
               6,   68,  110,  -47,  -91, -128,  -13,  -15,   98,  -99,
               4,  -97,  -64,   73,   67,  -70,  -42,  -84,  115,   -5,
               7,   29,  -95,   36,  -66,   91, -113,   44, -111,   73,
             105,   22,   54,  -49, -120,  123,  -30,  119,   63,  -34,
             121,   95,    9,   67,    7,   -3, -105, -118, -111,  -42,
            -128,   31,  -21,   83,  -49,  -50,   80,   55, -100,  113,
             -61,  125, -112,  -75,  127,  -39,   88,   48,   24,   33,
             -53,    0,  -64, -109,   81, -120,  -29,  -23,   46,  -10,
             116,  -92,   12,   14,  -74,   22,  -18,  106, -108,  123,
              -2,  107,  -95,  -16,  113,  -73,  124,  108,   47,   92,
             -89,   49,   98,   48,  -77,   -1,   10,  -68,   83,  -71,
             -88,  111,   60,    8,  -30, -104, -128,   96,   71,   -2,
             -11,  113,   74,   -4,  -80,  -21,    2,    3,    1,    0,
               1,  -93, -127,  -44,   48, -127,  -47,   48,   29,    6,
               3,   85,   29,   14,    4,   22,    4,   20,   15,  122,
             -93,  -84,   59,   -7,   20,   99,  -65,  -92,    8,  -11,
             113,   60,   -4,  -50,  -79, -114,  111,    4,   48, -127,
             -95,    6,    3,   85,   29,   35,    4, -127, -103,   48,
            -127, -106, -128,   20,   15,  122,  -93,  -84,   59,   -7,
              20,   99,  -65,  -92,    8,  -11,  113,   60,   -4,  -50,
             -79, -114,  111,    4,  -95,  115,  -92,  113,   48,  111,
              49,   11,   48,    9,    6,    3,   85,    4,    6,   19,
               2,   80,   76,   49,   19,   48,   17,    6,    3,   85,
               4,    8,   19,   10,   83,  111,  109,  101,   45,   83,
             116,   97,  116,  101,   49,   17,   48,   15,    6,    3,
              85,    4,    7,   19,    8,   87,   97,  114,  115,  122,
              97,  119,   97,   49,   25,   48,   23,    6,    3,   85,
               4,   10,   19,   16,   83,   99,  111,  116,  116,   32,
              84,  105,  103,  101,  114,   32,   83,   46,   65,   46,
              49,   11,   48,    9,    6,    3,   85,    4,   11,   19,
               2,   73,   84,   49,   16,   48,   14,    6,    3,   85,
               4,    3,   19,    7,   85,  108,   32,   82,  111,  111,
             116, -126,    9,    0,   -6,   91,   59,  -32,   20,   24,
              30,   75,   48,   12,    6,    3,   85,   29,   19,    4,
               5,   48,    3,    1,    1,   -1,   48,   13,    6,    9,
              42, -122,   72, -122,   -9,   13,    1,    1,    5,    5,
               0,    3, -126,    1,    1,    0,  113,   52,   65,  -33,
             127,    9, -119,  125,  127,   15,   94,  -44,  -64,  -24,
             115,  -75, -113,  -71,   82, -101,   -5,  -19,  126,   28,
              88,  -46,  -25,   13,   19,  -46, -104,   17, -119,  -81,
              71,  102,  -30,  106,  100,  -81,   39,   90, -122,  -69,
             104,  -56,  104,  100,  -46,   22,  -82,  -94,  -27,  -65,
             -10,  -26,  111,   13,  104,  -65,   84,  -96,  -97,   56,
            -122,  -82,  106,  -92,   14,  -43,  -62,    4,  -17,  108,
              44,  -13,  -53,  -55,   -5, -118, -116,   23,   65,   56,
              -8,  -25,   21,  100,  108,   94,  -78,  -64,   13,  -76,
            -101,   22,   32, -113, -105,   76,   -5,   64,   77,  114,
             -87,   63,   28,  114,   91,  124,  -99,   17,   70, -106,
             111,  -95,  -84,  -87,  -93,  -42,  -75,   64,   29,  -10,
              -2,   76,   18,   82,    7,  -91,  126,   59,  -61,  -96,
             100,  -72,  -52,  -96,  -54, -109,  -32,   74, -126,  -63,
             -57,    7,   49,  -99,   -5,   62,  -46, -125,   62,   61,
              76,  115,  120,   14,    9,   -5,  -30,   96,  -76,  105,
               8,  -13,   62,  -11,  -11,  100, -108,  -83,   77,  -12,
            -123,  -63,  111,  -95,    8,   81,   53,   -6,   47, -108,
              85, -107,   31,   96,  -10, -107,  -99,   20,    3, -121,
             115,    6,   25,  -21,   50, -118, -105, -109,  112, -106,
            -110,  -28,   56,   36,  -51,    1,  -29,   72,   95,   27,
              11,   93, -114,  112,  -14, -126,  -70,   37, -114, -112,
             119,   72,  113,  -53,  121,  -28,   63, -123,  -23, -100,
             -75,  117,   65,   -7,  -33,  119,  -56,    3,   39,   46,
             -95,    9,  -97,   86,  -66,   17,   -6,   16,    0,   33,
             116, -120
    };

public static void main(String[] args){
	try{
		ResolveNullChar t = new ResolveNullChar();
		t.testNoLineBreaks();
		t.test();
	} catch( Exception e ){
		e.printStackTrace();
	}
}
public void assertFalse(Object o1, Object o2){
	System.out.println(o1 + " - " + o2 );
}
//    @Test
    public void testNoLineBreaks() throws Exception
    {
        String s = Base64.encodeBytes( data );
        byte[] resultBytes = s.getBytes();
        assertFalse( "Result string ends with a 0x00 byte", resultBytes[resultBytes.length-1] == 0 );
    }

//    @Test
    public void test() throws Exception
    {
        String s = Base64.encodeBytes( data, Base64.DO_BREAK_LINES );
        System.out.println( "\n\n\n" + s + "\n\n\n" );
        byte[] resultBytes = s.getBytes();
        assertFalse( "Multiline result string ends with a 0x00 byte", resultBytes[resultBytes.length-1] == 0 );
    }

}
