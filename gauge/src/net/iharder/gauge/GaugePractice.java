/*
 * GaugePractice.java
 *
 * Created on March 1, 2008, 9:06 PM
 */

package net.iharder.gauge;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.LinearGradientPaint;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import javax.swing.JSlider;
import javax.swing.JTextField;

/**
 *
 * @author  robert.harder
 */
public class GaugePractice extends javax.swing.JFrame {
    

    
    /** Creates new form GaugePractice */
    public GaugePractice() {
        initComponents();


        ActionListener al = new ActionListener() {
            int range = 40;
            int pos = 0;
            public void actionPerformed(ActionEvent e) {
                float val = g.getValue();
                float min = g.getRedMin();
                float max = g.getRedMax();
                float redRange = max - min;
                float gradRange = redRange * 4;
                if( val >= min && val <= max ){
                    g.setRedPaint( new GradientPaint(
                            pos,pos,
                            new Color(255,200,200),
                            pos + gradRange, pos + gradRange,
                            Color.red,
                            true ));
                    pos++;
                }

            }
        };
        //new javax.swing.Timer(100,al).start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        g = new net.iharder.gauge.OneValueGauge();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSlider1.setMaximum(1000);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        getContentPane().add(jSlider1, java.awt.BorderLayout.PAGE_START);

        g.setGreenMin(65.0F);
        getContentPane().add(g, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-592)/2, (screenSize.height-472)/2, 592, 472);
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        JSlider slider = (JSlider)evt.getSource();
        if( slider.getValueIsAdjusting() ){
            int val = slider.getValue();
            g.setValue(val * 0.1f);
            //this.pitchGauge1.setPitch(slider.getValue());
            System.out.println(slider.getValue());
            //this.temperatureGauge1.setTemp(slider.getValue());
        }
//        this.altimeterPhotorealisticGauge1.setAltitude(slider.getValue());
//        this.verticalSpeedGauge1.setAltitude(slider.getValue());
    }//GEN-LAST:event_jSlider1StateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GaugePractice().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.iharder.gauge.OneValueGauge g;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
    
}
